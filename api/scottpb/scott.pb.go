// Protocol buffers related to the Scott Adams adventure games.
//
// To rebuild:
//   protoc -I=. --go_out=. ./scott.proto
//
// This will yield an updated copy of scott.pb.go in this directory.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: scott.proto

package scottpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConditionType int32

const (
	ConditionType_PARAMETER           ConditionType = 0
	ConditionType_ITEM_CARRIED        ConditionType = 1  // item |value| carried
	ConditionType_ITEM_IN_ROOM        ConditionType = 2  // item |value| in room with player
	ConditionType_ITEM_PRESENT        ConditionType = 3  // item |value| carried or in room with player
	ConditionType_PLAYER_IN_ROOM      ConditionType = 4  // player in room |value|
	ConditionType_ITEM_NOT_IN_ROOM    ConditionType = 5  // item |value| not in room with player
	ConditionType_ITEM_NOT_CARRIED    ConditionType = 6  // item |value| not carried
	ConditionType_PLAYER_NOT_IN_ROOM  ConditionType = 7  // player not in room |value|
	ConditionType_BIT_SET             ConditionType = 8  // bit flag |value| is set
	ConditionType_BIT_CLEAR           ConditionType = 9  // bit flag |value| is clear
	ConditionType_INVENTORY_NOT_EMPTY ConditionType = 10 // something is carried, |value| ignored
	ConditionType_INVENTORY_EMPTY     ConditionType = 11 // nothing is carried, |value| ignored
	ConditionType_ITEM_NOT_PRESENT    ConditionType = 12 // item |value| neither carried or in room with player
	ConditionType_ITEM_IN_GAME        ConditionType = 13 // item |value| is in the game (not in room 0)
	ConditionType_ITEM_NOT_IN_GAME    ConditionType = 14 // item |value| is not in the game (in room 0)
	ConditionType_COUNTER_LE          ConditionType = 15 // current counter is <= |value|
	ConditionType_COUNTER_GE          ConditionType = 16 // current counter is >= |value|
	ConditionType_ITEM_MOVED          ConditionType = 17 // item |value| is in its initial location
	ConditionType_ITEM_NOT_MOVED      ConditionType = 18 // item |value| is not in its initial location
	ConditionType_COUNTER_EQ          ConditionType = 19 // current counter is == |value|
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0:  "PARAMETER",
		1:  "ITEM_CARRIED",
		2:  "ITEM_IN_ROOM",
		3:  "ITEM_PRESENT",
		4:  "PLAYER_IN_ROOM",
		5:  "ITEM_NOT_IN_ROOM",
		6:  "ITEM_NOT_CARRIED",
		7:  "PLAYER_NOT_IN_ROOM",
		8:  "BIT_SET",
		9:  "BIT_CLEAR",
		10: "INVENTORY_NOT_EMPTY",
		11: "INVENTORY_EMPTY",
		12: "ITEM_NOT_PRESENT",
		13: "ITEM_IN_GAME",
		14: "ITEM_NOT_IN_GAME",
		15: "COUNTER_LE",
		16: "COUNTER_GE",
		17: "ITEM_MOVED",
		18: "ITEM_NOT_MOVED",
		19: "COUNTER_EQ",
	}
	ConditionType_value = map[string]int32{
		"PARAMETER":           0,
		"ITEM_CARRIED":        1,
		"ITEM_IN_ROOM":        2,
		"ITEM_PRESENT":        3,
		"PLAYER_IN_ROOM":      4,
		"ITEM_NOT_IN_ROOM":    5,
		"ITEM_NOT_CARRIED":    6,
		"PLAYER_NOT_IN_ROOM":  7,
		"BIT_SET":             8,
		"BIT_CLEAR":           9,
		"INVENTORY_NOT_EMPTY": 10,
		"INVENTORY_EMPTY":     11,
		"ITEM_NOT_PRESENT":    12,
		"ITEM_IN_GAME":        13,
		"ITEM_NOT_IN_GAME":    14,
		"COUNTER_LE":          15,
		"COUNTER_GE":          16,
		"ITEM_MOVED":          17,
		"ITEM_NOT_MOVED":      18,
		"COUNTER_EQ":          19,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_scott_proto_enumTypes[0].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_scott_proto_enumTypes[0]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{0}
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknown0      int32 `protobuf:"varint,1,opt,name=unknown0,proto3" json:"unknown0,omitempty"`                                 // unknown purpose (bytes 0-1)
	NumItems      int32 `protobuf:"varint,2,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`                 // number of items
	NumActions    int32 `protobuf:"varint,3,opt,name=num_actions,json=numActions,proto3" json:"num_actions,omitempty"`           // number of actions
	NumWords      int32 `protobuf:"varint,4,opt,name=num_words,json=numWords,proto3" json:"num_words,omitempty"`                 // number of both nouns and verbs
	NumRooms      int32 `protobuf:"varint,5,opt,name=num_rooms,json=numRooms,proto3" json:"num_rooms,omitempty"`                 // number of rooms
	MaxInventory  int32 `protobuf:"varint,6,opt,name=max_inventory,json=maxInventory,proto3" json:"max_inventory,omitempty"`     // maximum number of inventory items
	StartingRoom  int32 `protobuf:"varint,7,opt,name=starting_room,json=startingRoom,proto3" json:"starting_room,omitempty"`     // 0-based index of initial room
	NumTreasures  int32 `protobuf:"varint,8,opt,name=num_treasures,json=numTreasures,proto3" json:"num_treasures,omitempty"`     // number of treasures (technically redundant)
	WordLength    int32 `protobuf:"varint,9,opt,name=word_length,json=wordLength,proto3" json:"word_length,omitempty"`           // word length (3, 4, 5)
	LightDuration int32 `protobuf:"varint,10,opt,name=light_duration,json=lightDuration,proto3" json:"light_duration,omitempty"` // number of turns for light, or -1 for eternal
	NumMessages   int32 `protobuf:"varint,11,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`       // number of messages
	TreasureRoom  int32 `protobuf:"varint,12,opt,name=treasure_room,json=treasureRoom,proto3" json:"treasure_room,omitempty"`    // 0-based index of treasure room for scoring
	Unknown12     int32 `protobuf:"varint,13,opt,name=unknown12,proto3" json:"unknown12,omitempty"`                              // unknown purpose (bytes 26-27)
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetUnknown0() int32 {
	if x != nil {
		return x.Unknown0
	}
	return 0
}

func (x *Header) GetNumItems() int32 {
	if x != nil {
		return x.NumItems
	}
	return 0
}

func (x *Header) GetNumActions() int32 {
	if x != nil {
		return x.NumActions
	}
	return 0
}

func (x *Header) GetNumWords() int32 {
	if x != nil {
		return x.NumWords
	}
	return 0
}

func (x *Header) GetNumRooms() int32 {
	if x != nil {
		return x.NumRooms
	}
	return 0
}

func (x *Header) GetMaxInventory() int32 {
	if x != nil {
		return x.MaxInventory
	}
	return 0
}

func (x *Header) GetStartingRoom() int32 {
	if x != nil {
		return x.StartingRoom
	}
	return 0
}

func (x *Header) GetNumTreasures() int32 {
	if x != nil {
		return x.NumTreasures
	}
	return 0
}

func (x *Header) GetWordLength() int32 {
	if x != nil {
		return x.WordLength
	}
	return 0
}

func (x *Header) GetLightDuration() int32 {
	if x != nil {
		return x.LightDuration
	}
	return 0
}

func (x *Header) GetNumMessages() int32 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

func (x *Header) GetTreasureRoom() int32 {
	if x != nil {
		return x.TreasureRoom
	}
	return 0
}

func (x *Header) GetUnknown12() int32 {
	if x != nil {
		return x.Unknown12
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=scott.ConditionType" json:"type,omitempty"` // the type of condition
	Value int32         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                        // the parameter to the condition
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetType() ConditionType {
	if x != nil {
		return x.Type
	}
	return ConditionType_PARAMETER
}

func (x *Condition) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbIndex  int32        `protobuf:"varint,1,opt,name=verb_index,json=verbIndex,proto3" json:"verb_index,omitempty"` // index of the verb
	NounIndex  int32        `protobuf:"varint,2,opt,name=noun_index,json=nounIndex,proto3" json:"noun_index,omitempty"` // index of the noun
	Conditions []*Condition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`                 // 5 conditions
	Actions    []int32      `protobuf:"varint,4,rep,packed,name=actions,proto3" json:"actions,omitempty"`               // 4 actions
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{2}
}

func (x *Action) GetVerbIndex() int32 {
	if x != nil {
		return x.VerbIndex
	}
	return 0
}

func (x *Action) GetNounIndex() int32 {
	if x != nil {
		return x.NounIndex
	}
	return 0
}

func (x *Action) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Action) GetActions() []int32 {
	if x != nil {
		return x.Actions
	}
	return nil
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Actions []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{3}
}

func (x *Game) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Game) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

var File_scott_proto protoreflect.FileDescriptor

var file_scott_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x63, 0x6f, 0x74, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x32, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x32,
	0x22, 0x4b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x63,
	0x6f, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x62,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x75, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x75,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x6f,
	0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f,
	0x74, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x88, 0x03, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10,
	0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x45, 0x51, 0x10, 0x13, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x63, 0x6f, 0x74, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scott_proto_rawDescOnce sync.Once
	file_scott_proto_rawDescData = file_scott_proto_rawDesc
)

func file_scott_proto_rawDescGZIP() []byte {
	file_scott_proto_rawDescOnce.Do(func() {
		file_scott_proto_rawDescData = protoimpl.X.CompressGZIP(file_scott_proto_rawDescData)
	})
	return file_scott_proto_rawDescData
}

var file_scott_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scott_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_scott_proto_goTypes = []interface{}{
	(ConditionType)(0), // 0: scott.ConditionType
	(*Header)(nil),     // 1: scott.Header
	(*Condition)(nil),  // 2: scott.Condition
	(*Action)(nil),     // 3: scott.Action
	(*Game)(nil),       // 4: scott.Game
}
var file_scott_proto_depIdxs = []int32{
	0, // 0: scott.Condition.type:type_name -> scott.ConditionType
	2, // 1: scott.Action.conditions:type_name -> scott.Condition
	1, // 2: scott.Game.header:type_name -> scott.Header
	3, // 3: scott.Game.actions:type_name -> scott.Action
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_scott_proto_init() }
func file_scott_proto_init() {
	if File_scott_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scott_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scott_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scott_proto_goTypes,
		DependencyIndexes: file_scott_proto_depIdxs,
		EnumInfos:         file_scott_proto_enumTypes,
		MessageInfos:      file_scott_proto_msgTypes,
	}.Build()
	File_scott_proto = out.File
	file_scott_proto_rawDesc = nil
	file_scott_proto_goTypes = nil
	file_scott_proto_depIdxs = nil
}
