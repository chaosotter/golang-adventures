// Protocol buffers related to the Scott Adams adventure games.
//
// To rebuild:
//   protoc -I=. --go_out=. ./scott.proto
//
// This will yield an updated copy of scott.pb.go in this directory.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: scott.proto

package scottpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConditionType int32

const (
	ConditionType_PARAMETER           ConditionType = 0  // sets up parameters for actions
	ConditionType_ITEM_CARRIED        ConditionType = 1  // item |value| carried
	ConditionType_ITEM_IN_ROOM        ConditionType = 2  // item |value| in room with player
	ConditionType_ITEM_PRESENT        ConditionType = 3  // item |value| carried or in room with player
	ConditionType_PLAYER_IN_ROOM      ConditionType = 4  // player in room |value|
	ConditionType_ITEM_NOT_IN_ROOM    ConditionType = 5  // item |value| not in room with player
	ConditionType_ITEM_NOT_CARRIED    ConditionType = 6  // item |value| not carried
	ConditionType_PLAYER_NOT_IN_ROOM  ConditionType = 7  // player not in room |value|
	ConditionType_BIT_SET             ConditionType = 8  // bit flag |value| is set
	ConditionType_BIT_CLEAR           ConditionType = 9  // bit flag |value| is clear
	ConditionType_INVENTORY_NOT_EMPTY ConditionType = 10 // something is carried, |value| ignored
	ConditionType_INVENTORY_EMPTY     ConditionType = 11 // nothing is carried, |value| ignored
	ConditionType_ITEM_NOT_PRESENT    ConditionType = 12 // item |value| neither carried or in room with player
	ConditionType_ITEM_IN_GAME        ConditionType = 13 // item |value| is in the game (not in room 0)
	ConditionType_ITEM_NOT_IN_GAME    ConditionType = 14 // item |value| is not in the game (in room 0)
	ConditionType_COUNTER_LE          ConditionType = 15 // current counter is <= |value|
	ConditionType_COUNTER_GE          ConditionType = 16 // current counter is >= |value|
	ConditionType_ITEM_MOVED          ConditionType = 17 // item |value| is in its initial location
	ConditionType_ITEM_NOT_MOVED      ConditionType = 18 // item |value| is not in its initial location
	ConditionType_COUNTER_EQ          ConditionType = 19 // current counter is == |value|
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0:  "PARAMETER",
		1:  "ITEM_CARRIED",
		2:  "ITEM_IN_ROOM",
		3:  "ITEM_PRESENT",
		4:  "PLAYER_IN_ROOM",
		5:  "ITEM_NOT_IN_ROOM",
		6:  "ITEM_NOT_CARRIED",
		7:  "PLAYER_NOT_IN_ROOM",
		8:  "BIT_SET",
		9:  "BIT_CLEAR",
		10: "INVENTORY_NOT_EMPTY",
		11: "INVENTORY_EMPTY",
		12: "ITEM_NOT_PRESENT",
		13: "ITEM_IN_GAME",
		14: "ITEM_NOT_IN_GAME",
		15: "COUNTER_LE",
		16: "COUNTER_GE",
		17: "ITEM_MOVED",
		18: "ITEM_NOT_MOVED",
		19: "COUNTER_EQ",
	}
	ConditionType_value = map[string]int32{
		"PARAMETER":           0,
		"ITEM_CARRIED":        1,
		"ITEM_IN_ROOM":        2,
		"ITEM_PRESENT":        3,
		"PLAYER_IN_ROOM":      4,
		"ITEM_NOT_IN_ROOM":    5,
		"ITEM_NOT_CARRIED":    6,
		"PLAYER_NOT_IN_ROOM":  7,
		"BIT_SET":             8,
		"BIT_CLEAR":           9,
		"INVENTORY_NOT_EMPTY": 10,
		"INVENTORY_EMPTY":     11,
		"ITEM_NOT_PRESENT":    12,
		"ITEM_IN_GAME":        13,
		"ITEM_NOT_IN_GAME":    14,
		"COUNTER_LE":          15,
		"COUNTER_GE":          16,
		"ITEM_MOVED":          17,
		"ITEM_NOT_MOVED":      18,
		"COUNTER_EQ":          19,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_scott_proto_enumTypes[0].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_scott_proto_enumTypes[0]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{0}
}

type ActionType int32

const (
	ActionType_NOTHING           ActionType = 0
	ActionType_MESSAGE_0         ActionType = 1   // print message 0
	ActionType_MESSAGE_1         ActionType = 2   // print message 1
	ActionType_MESSAGE_2         ActionType = 3   // print message 2
	ActionType_MESSAGE_3         ActionType = 4   // print message 3
	ActionType_MESSAGE_4         ActionType = 5   // print message 4
	ActionType_MESSAGE_5         ActionType = 6   // print message 5
	ActionType_MESSAGE_6         ActionType = 7   // print message 6
	ActionType_MESSAGE_7         ActionType = 8   // print message 7
	ActionType_MESSAGE_8         ActionType = 9   // print message 8
	ActionType_MESSAGE_9         ActionType = 10  // print message 9
	ActionType_MESSAGE_10        ActionType = 11  // print message 10
	ActionType_MESSAGE_11        ActionType = 12  // print message 11
	ActionType_MESSAGE_12        ActionType = 13  // print message 12
	ActionType_MESSAGE_13        ActionType = 14  // print message 13
	ActionType_MESSAGE_14        ActionType = 15  // print message 14
	ActionType_MESSAGE_15        ActionType = 16  // print message 15
	ActionType_MESSAGE_16        ActionType = 17  // print message 16
	ActionType_MESSAGE_17        ActionType = 18  // print message 17
	ActionType_MESSAGE_18        ActionType = 19  // print message 18
	ActionType_MESSAGE_19        ActionType = 20  // print message 19
	ActionType_MESSAGE_20        ActionType = 21  // print message 20
	ActionType_MESSAGE_21        ActionType = 22  // print message 21
	ActionType_MESSAGE_22        ActionType = 23  // print message 22
	ActionType_MESSAGE_23        ActionType = 24  // print message 23
	ActionType_MESSAGE_24        ActionType = 25  // print message 24
	ActionType_MESSAGE_25        ActionType = 26  // print message 25
	ActionType_MESSAGE_26        ActionType = 27  // print message 26
	ActionType_MESSAGE_27        ActionType = 28  // print message 27
	ActionType_MESSAGE_28        ActionType = 29  // print message 28
	ActionType_MESSAGE_29        ActionType = 30  // print message 29
	ActionType_MESSAGE_30        ActionType = 31  // print message 30
	ActionType_MESSAGE_31        ActionType = 32  // print message 31
	ActionType_MESSAGE_32        ActionType = 33  // print message 32
	ActionType_MESSAGE_33        ActionType = 34  // print message 33
	ActionType_MESSAGE_34        ActionType = 35  // print message 34
	ActionType_MESSAGE_35        ActionType = 36  // print message 35
	ActionType_MESSAGE_36        ActionType = 37  // print message 36
	ActionType_MESSAGE_37        ActionType = 38  // print message 37
	ActionType_MESSAGE_38        ActionType = 39  // print message 38
	ActionType_MESSAGE_39        ActionType = 40  // print message 39
	ActionType_MESSAGE_40        ActionType = 41  // print message 40
	ActionType_MESSAGE_41        ActionType = 42  // print message 41
	ActionType_MESSAGE_42        ActionType = 43  // print message 42
	ActionType_MESSAGE_43        ActionType = 44  // print message 43
	ActionType_MESSAGE_44        ActionType = 45  // print message 44
	ActionType_MESSAGE_45        ActionType = 46  // print message 45
	ActionType_MESSAGE_46        ActionType = 47  // print message 46
	ActionType_MESSAGE_47        ActionType = 48  // print message 47
	ActionType_MESSAGE_48        ActionType = 49  // print message 48
	ActionType_MESSAGE_49        ActionType = 50  // print message 49
	ActionType_MESSAGE_50        ActionType = 51  // print message 50
	ActionType_GET_ITEM          ActionType = 52  // get item |param| (with checks)
	ActionType_DROP_ITEM         ActionType = 53  // drop item |param|
	ActionType_MOVE_PLAYER       ActionType = 54  // move player to room |param|
	ActionType_REMOVE_ITEM       ActionType = 55  // item |param| is removed (put in room 0)
	ActionType_SET_DARKNESS      ActionType = 56  // set the darkness flag
	ActionType_CLEAR_DARKNESS    ActionType = 57  // clear the darkness flag
	ActionType_SET_BIT           ActionType = 58  // set bit flag |param|
	ActionType_REMOVE_ITEM2      ActionType = 59  // duplicate of type 55 (REMOVE_ITEM)
	ActionType_CLEAR_BIT         ActionType = 60  // clear bit flag |param|
	ActionType_DEATH             ActionType = 61  // kill the player (put in last room)
	ActionType_PUT_ITEM          ActionType = 62  // put item |param1| in room |param2|
	ActionType_GAME_OVER         ActionType = 63  // game over
	ActionType_DESCRIBE_ROOM     ActionType = 64  // describe the current room
	ActionType_SCORE             ActionType = 65  // show the score
	ActionType_INVENTORY         ActionType = 66  // show the inventory
	ActionType_SET_BIT_0         ActionType = 67  // set bit flag 0
	ActionType_CLEAR_BIT_0       ActionType = 68  // clear bit flag 0
	ActionType_REFILL_LIGHT      ActionType = 69  // refill the light source
	ActionType_CLEAR_SCREEN      ActionType = 70  // clear the screen
	ActionType_SAVE_GAME         ActionType = 71  // saves the current game
	ActionType_SWAP_ITEMS        ActionType = 72  // exchange the locations of items |param1| and |param2|
	ActionType_CONTINUE          ActionType = 73  // continue with next action (continuation actions have verb 0, noun 0)
	ActionType_TAKE_ITEM         ActionType = 74  // unconditionally take item |param|
	ActionType_MOVE_ITEM_TO_ITEM ActionType = 75  // move item |param1| to location of item |param2|
	ActionType_DESCRIBE_ROOM2    ActionType = 76  // duplicate of type 64 (DESCRIBE_ROOM)
	ActionType_DECREMENT_COUNTER ActionType = 77  // decrement current counter (to minimum of 0)
	ActionType_PRINT_COUNTER     ActionType = 78  // print current counter value
	ActionType_SET_COUNTER       ActionType = 79  // set current counter to |param|
	ActionType_SWAP_LOCATION     ActionType = 80  // swap player location with location-swap
	ActionType_SELECT_COUNTER    ActionType = 81  // swap current counter for counter |param|
	ActionType_ADD_TO_COUNTER    ActionType = 82  // add |param| to current counter
	ActionType_SUB_FROM_COUNTER  ActionType = 83  // subtract |param| from current counter
	ActionType_ECHO_NOUN         ActionType = 84  // echo the noun
	ActionType_ECHO_NOUN_CR      ActionType = 85  // echo the noun and a <CR>
	ActionType_ECHO_CR           ActionType = 86  // echo a <CR>
	ActionType_SWAP_LOCATION_N   ActionType = 87  // swap player location with location-swap |param|
	ActionType_DELAY             ActionType = 88  // wait two seconds
	ActionType_DRAW_PICTURE      ActionType = 89  // draw picture |param| (for SAGA games)
	ActionType_MESSAGE_51        ActionType = 102 // print message 51
	ActionType_MESSAGE_52        ActionType = 103 // print message 52
	ActionType_MESSAGE_53        ActionType = 104 // print message 53
	ActionType_MESSAGE_54        ActionType = 105 // print message 54
	ActionType_MESSAGE_55        ActionType = 106 // print message 55
	ActionType_MESSAGE_56        ActionType = 107 // print message 56
	ActionType_MESSAGE_57        ActionType = 108 // print message 57
	ActionType_MESSAGE_58        ActionType = 109 // print message 58
	ActionType_MESSAGE_59        ActionType = 110 // print message 59
	ActionType_MESSAGE_60        ActionType = 111 // print message 60
	ActionType_MESSAGE_61        ActionType = 112 // print message 61
	ActionType_MESSAGE_62        ActionType = 113 // print message 62
	ActionType_MESSAGE_63        ActionType = 114 // print message 63
	ActionType_MESSAGE_64        ActionType = 115 // print message 64
	ActionType_MESSAGE_65        ActionType = 116 // print message 65
	ActionType_MESSAGE_66        ActionType = 117 // print message 66
	ActionType_MESSAGE_67        ActionType = 118 // print message 67
	ActionType_MESSAGE_68        ActionType = 119 // print message 68
	ActionType_MESSAGE_69        ActionType = 120 // print message 69
	ActionType_MESSAGE_70        ActionType = 121 // print message 70
	ActionType_MESSAGE_71        ActionType = 122 // print message 71
	ActionType_MESSAGE_72        ActionType = 123 // print message 72
	ActionType_MESSAGE_73        ActionType = 124 // print message 73
	ActionType_MESSAGE_74        ActionType = 125 // print message 74
	ActionType_MESSAGE_75        ActionType = 126 // print message 75
	ActionType_MESSAGE_76        ActionType = 127 // print message 76
	ActionType_MESSAGE_77        ActionType = 128 // print message 77
	ActionType_MESSAGE_78        ActionType = 129 // print message 78
	ActionType_MESSAGE_79        ActionType = 130 // print message 79
	ActionType_MESSAGE_80        ActionType = 131 // print message 80
	ActionType_MESSAGE_81        ActionType = 132 // print message 81
	ActionType_MESSAGE_82        ActionType = 133 // print message 82
	ActionType_MESSAGE_83        ActionType = 134 // print message 83
	ActionType_MESSAGE_84        ActionType = 135 // print message 84
	ActionType_MESSAGE_85        ActionType = 136 // print message 85
	ActionType_MESSAGE_86        ActionType = 137 // print message 86
	ActionType_MESSAGE_87        ActionType = 138 // print message 87
	ActionType_MESSAGE_88        ActionType = 139 // print message 88
	ActionType_MESSAGE_89        ActionType = 140 // print message 89
	ActionType_MESSAGE_90        ActionType = 141 // print message 90
	ActionType_MESSAGE_91        ActionType = 142 // print message 91
	ActionType_MESSAGE_92        ActionType = 143 // print message 92
	ActionType_MESSAGE_93        ActionType = 144 // print message 93
	ActionType_MESSAGE_94        ActionType = 145 // print message 94
	ActionType_MESSAGE_95        ActionType = 146 // print message 95
	ActionType_MESSAGE_96        ActionType = 147 // print message 96
	ActionType_MESSAGE_97        ActionType = 148 // print message 97
	ActionType_MESSAGE_98        ActionType = 149 // print message 98
	ActionType_MESSAGE_99        ActionType = 150 // print message 99
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:   "NOTHING",
		1:   "MESSAGE_0",
		2:   "MESSAGE_1",
		3:   "MESSAGE_2",
		4:   "MESSAGE_3",
		5:   "MESSAGE_4",
		6:   "MESSAGE_5",
		7:   "MESSAGE_6",
		8:   "MESSAGE_7",
		9:   "MESSAGE_8",
		10:  "MESSAGE_9",
		11:  "MESSAGE_10",
		12:  "MESSAGE_11",
		13:  "MESSAGE_12",
		14:  "MESSAGE_13",
		15:  "MESSAGE_14",
		16:  "MESSAGE_15",
		17:  "MESSAGE_16",
		18:  "MESSAGE_17",
		19:  "MESSAGE_18",
		20:  "MESSAGE_19",
		21:  "MESSAGE_20",
		22:  "MESSAGE_21",
		23:  "MESSAGE_22",
		24:  "MESSAGE_23",
		25:  "MESSAGE_24",
		26:  "MESSAGE_25",
		27:  "MESSAGE_26",
		28:  "MESSAGE_27",
		29:  "MESSAGE_28",
		30:  "MESSAGE_29",
		31:  "MESSAGE_30",
		32:  "MESSAGE_31",
		33:  "MESSAGE_32",
		34:  "MESSAGE_33",
		35:  "MESSAGE_34",
		36:  "MESSAGE_35",
		37:  "MESSAGE_36",
		38:  "MESSAGE_37",
		39:  "MESSAGE_38",
		40:  "MESSAGE_39",
		41:  "MESSAGE_40",
		42:  "MESSAGE_41",
		43:  "MESSAGE_42",
		44:  "MESSAGE_43",
		45:  "MESSAGE_44",
		46:  "MESSAGE_45",
		47:  "MESSAGE_46",
		48:  "MESSAGE_47",
		49:  "MESSAGE_48",
		50:  "MESSAGE_49",
		51:  "MESSAGE_50",
		52:  "GET_ITEM",
		53:  "DROP_ITEM",
		54:  "MOVE_PLAYER",
		55:  "REMOVE_ITEM",
		56:  "SET_DARKNESS",
		57:  "CLEAR_DARKNESS",
		58:  "SET_BIT",
		59:  "REMOVE_ITEM2",
		60:  "CLEAR_BIT",
		61:  "DEATH",
		62:  "PUT_ITEM",
		63:  "GAME_OVER",
		64:  "DESCRIBE_ROOM",
		65:  "SCORE",
		66:  "INVENTORY",
		67:  "SET_BIT_0",
		68:  "CLEAR_BIT_0",
		69:  "REFILL_LIGHT",
		70:  "CLEAR_SCREEN",
		71:  "SAVE_GAME",
		72:  "SWAP_ITEMS",
		73:  "CONTINUE",
		74:  "TAKE_ITEM",
		75:  "MOVE_ITEM_TO_ITEM",
		76:  "DESCRIBE_ROOM2",
		77:  "DECREMENT_COUNTER",
		78:  "PRINT_COUNTER",
		79:  "SET_COUNTER",
		80:  "SWAP_LOCATION",
		81:  "SELECT_COUNTER",
		82:  "ADD_TO_COUNTER",
		83:  "SUB_FROM_COUNTER",
		84:  "ECHO_NOUN",
		85:  "ECHO_NOUN_CR",
		86:  "ECHO_CR",
		87:  "SWAP_LOCATION_N",
		88:  "DELAY",
		89:  "DRAW_PICTURE",
		102: "MESSAGE_51",
		103: "MESSAGE_52",
		104: "MESSAGE_53",
		105: "MESSAGE_54",
		106: "MESSAGE_55",
		107: "MESSAGE_56",
		108: "MESSAGE_57",
		109: "MESSAGE_58",
		110: "MESSAGE_59",
		111: "MESSAGE_60",
		112: "MESSAGE_61",
		113: "MESSAGE_62",
		114: "MESSAGE_63",
		115: "MESSAGE_64",
		116: "MESSAGE_65",
		117: "MESSAGE_66",
		118: "MESSAGE_67",
		119: "MESSAGE_68",
		120: "MESSAGE_69",
		121: "MESSAGE_70",
		122: "MESSAGE_71",
		123: "MESSAGE_72",
		124: "MESSAGE_73",
		125: "MESSAGE_74",
		126: "MESSAGE_75",
		127: "MESSAGE_76",
		128: "MESSAGE_77",
		129: "MESSAGE_78",
		130: "MESSAGE_79",
		131: "MESSAGE_80",
		132: "MESSAGE_81",
		133: "MESSAGE_82",
		134: "MESSAGE_83",
		135: "MESSAGE_84",
		136: "MESSAGE_85",
		137: "MESSAGE_86",
		138: "MESSAGE_87",
		139: "MESSAGE_88",
		140: "MESSAGE_89",
		141: "MESSAGE_90",
		142: "MESSAGE_91",
		143: "MESSAGE_92",
		144: "MESSAGE_93",
		145: "MESSAGE_94",
		146: "MESSAGE_95",
		147: "MESSAGE_96",
		148: "MESSAGE_97",
		149: "MESSAGE_98",
		150: "MESSAGE_99",
	}
	ActionType_value = map[string]int32{
		"NOTHING":           0,
		"MESSAGE_0":         1,
		"MESSAGE_1":         2,
		"MESSAGE_2":         3,
		"MESSAGE_3":         4,
		"MESSAGE_4":         5,
		"MESSAGE_5":         6,
		"MESSAGE_6":         7,
		"MESSAGE_7":         8,
		"MESSAGE_8":         9,
		"MESSAGE_9":         10,
		"MESSAGE_10":        11,
		"MESSAGE_11":        12,
		"MESSAGE_12":        13,
		"MESSAGE_13":        14,
		"MESSAGE_14":        15,
		"MESSAGE_15":        16,
		"MESSAGE_16":        17,
		"MESSAGE_17":        18,
		"MESSAGE_18":        19,
		"MESSAGE_19":        20,
		"MESSAGE_20":        21,
		"MESSAGE_21":        22,
		"MESSAGE_22":        23,
		"MESSAGE_23":        24,
		"MESSAGE_24":        25,
		"MESSAGE_25":        26,
		"MESSAGE_26":        27,
		"MESSAGE_27":        28,
		"MESSAGE_28":        29,
		"MESSAGE_29":        30,
		"MESSAGE_30":        31,
		"MESSAGE_31":        32,
		"MESSAGE_32":        33,
		"MESSAGE_33":        34,
		"MESSAGE_34":        35,
		"MESSAGE_35":        36,
		"MESSAGE_36":        37,
		"MESSAGE_37":        38,
		"MESSAGE_38":        39,
		"MESSAGE_39":        40,
		"MESSAGE_40":        41,
		"MESSAGE_41":        42,
		"MESSAGE_42":        43,
		"MESSAGE_43":        44,
		"MESSAGE_44":        45,
		"MESSAGE_45":        46,
		"MESSAGE_46":        47,
		"MESSAGE_47":        48,
		"MESSAGE_48":        49,
		"MESSAGE_49":        50,
		"MESSAGE_50":        51,
		"GET_ITEM":          52,
		"DROP_ITEM":         53,
		"MOVE_PLAYER":       54,
		"REMOVE_ITEM":       55,
		"SET_DARKNESS":      56,
		"CLEAR_DARKNESS":    57,
		"SET_BIT":           58,
		"REMOVE_ITEM2":      59,
		"CLEAR_BIT":         60,
		"DEATH":             61,
		"PUT_ITEM":          62,
		"GAME_OVER":         63,
		"DESCRIBE_ROOM":     64,
		"SCORE":             65,
		"INVENTORY":         66,
		"SET_BIT_0":         67,
		"CLEAR_BIT_0":       68,
		"REFILL_LIGHT":      69,
		"CLEAR_SCREEN":      70,
		"SAVE_GAME":         71,
		"SWAP_ITEMS":        72,
		"CONTINUE":          73,
		"TAKE_ITEM":         74,
		"MOVE_ITEM_TO_ITEM": 75,
		"DESCRIBE_ROOM2":    76,
		"DECREMENT_COUNTER": 77,
		"PRINT_COUNTER":     78,
		"SET_COUNTER":       79,
		"SWAP_LOCATION":     80,
		"SELECT_COUNTER":    81,
		"ADD_TO_COUNTER":    82,
		"SUB_FROM_COUNTER":  83,
		"ECHO_NOUN":         84,
		"ECHO_NOUN_CR":      85,
		"ECHO_CR":           86,
		"SWAP_LOCATION_N":   87,
		"DELAY":             88,
		"DRAW_PICTURE":      89,
		"MESSAGE_51":        102,
		"MESSAGE_52":        103,
		"MESSAGE_53":        104,
		"MESSAGE_54":        105,
		"MESSAGE_55":        106,
		"MESSAGE_56":        107,
		"MESSAGE_57":        108,
		"MESSAGE_58":        109,
		"MESSAGE_59":        110,
		"MESSAGE_60":        111,
		"MESSAGE_61":        112,
		"MESSAGE_62":        113,
		"MESSAGE_63":        114,
		"MESSAGE_64":        115,
		"MESSAGE_65":        116,
		"MESSAGE_66":        117,
		"MESSAGE_67":        118,
		"MESSAGE_68":        119,
		"MESSAGE_69":        120,
		"MESSAGE_70":        121,
		"MESSAGE_71":        122,
		"MESSAGE_72":        123,
		"MESSAGE_73":        124,
		"MESSAGE_74":        125,
		"MESSAGE_75":        126,
		"MESSAGE_76":        127,
		"MESSAGE_77":        128,
		"MESSAGE_78":        129,
		"MESSAGE_79":        130,
		"MESSAGE_80":        131,
		"MESSAGE_81":        132,
		"MESSAGE_82":        133,
		"MESSAGE_83":        134,
		"MESSAGE_84":        135,
		"MESSAGE_85":        136,
		"MESSAGE_86":        137,
		"MESSAGE_87":        138,
		"MESSAGE_88":        139,
		"MESSAGE_89":        140,
		"MESSAGE_90":        141,
		"MESSAGE_91":        142,
		"MESSAGE_92":        143,
		"MESSAGE_93":        144,
		"MESSAGE_94":        145,
		"MESSAGE_95":        146,
		"MESSAGE_96":        147,
		"MESSAGE_97":        148,
		"MESSAGE_98":        149,
		"MESSAGE_99":        150,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_scott_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_scott_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{1}
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknown0      int32 `protobuf:"varint,1,opt,name=unknown0,proto3" json:"unknown0,omitempty"`                                 // unknown purpose
	NumItems      int32 `protobuf:"varint,2,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`                 // number of items
	NumActions    int32 `protobuf:"varint,3,opt,name=num_actions,json=numActions,proto3" json:"num_actions,omitempty"`           // number of actions
	NumWords      int32 `protobuf:"varint,4,opt,name=num_words,json=numWords,proto3" json:"num_words,omitempty"`                 // number of both nouns and verbs
	NumRooms      int32 `protobuf:"varint,5,opt,name=num_rooms,json=numRooms,proto3" json:"num_rooms,omitempty"`                 // number of rooms
	MaxInventory  int32 `protobuf:"varint,6,opt,name=max_inventory,json=maxInventory,proto3" json:"max_inventory,omitempty"`     // maximum number of inventory items
	StartingRoom  int32 `protobuf:"varint,7,opt,name=starting_room,json=startingRoom,proto3" json:"starting_room,omitempty"`     // 0-based index of initial room
	NumTreasures  int32 `protobuf:"varint,8,opt,name=num_treasures,json=numTreasures,proto3" json:"num_treasures,omitempty"`     // number of treasures (technically redundant)
	WordLength    int32 `protobuf:"varint,9,opt,name=word_length,json=wordLength,proto3" json:"word_length,omitempty"`           // word length (3, 4, 5)
	LightDuration int32 `protobuf:"varint,10,opt,name=light_duration,json=lightDuration,proto3" json:"light_duration,omitempty"` // number of turns for light, or -1 for eternal
	NumMessages   int32 `protobuf:"varint,11,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`       // number of messages
	TreasureRoom  int32 `protobuf:"varint,12,opt,name=treasure_room,json=treasureRoom,proto3" json:"treasure_room,omitempty"`    // 0-based index of treasure room for scoring
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetUnknown0() int32 {
	if x != nil {
		return x.Unknown0
	}
	return 0
}

func (x *Header) GetNumItems() int32 {
	if x != nil {
		return x.NumItems
	}
	return 0
}

func (x *Header) GetNumActions() int32 {
	if x != nil {
		return x.NumActions
	}
	return 0
}

func (x *Header) GetNumWords() int32 {
	if x != nil {
		return x.NumWords
	}
	return 0
}

func (x *Header) GetNumRooms() int32 {
	if x != nil {
		return x.NumRooms
	}
	return 0
}

func (x *Header) GetMaxInventory() int32 {
	if x != nil {
		return x.MaxInventory
	}
	return 0
}

func (x *Header) GetStartingRoom() int32 {
	if x != nil {
		return x.StartingRoom
	}
	return 0
}

func (x *Header) GetNumTreasures() int32 {
	if x != nil {
		return x.NumTreasures
	}
	return 0
}

func (x *Header) GetWordLength() int32 {
	if x != nil {
		return x.WordLength
	}
	return 0
}

func (x *Header) GetLightDuration() int32 {
	if x != nil {
		return x.LightDuration
	}
	return 0
}

func (x *Header) GetNumMessages() int32 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

func (x *Header) GetTreasureRoom() int32 {
	if x != nil {
		return x.TreasureRoom
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=scott.ConditionType" json:"type,omitempty"` // the type of condition
	Value int32         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                        // the parameter to the condition
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetType() ConditionType {
	if x != nil {
		return x.Type
	}
	return ConditionType_PARAMETER
}

func (x *Condition) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbIndex  int32        `protobuf:"varint,1,opt,name=verb_index,json=verbIndex,proto3" json:"verb_index,omitempty"`         // index of the verb
	NounIndex  int32        `protobuf:"varint,2,opt,name=noun_index,json=nounIndex,proto3" json:"noun_index,omitempty"`         // index of the noun
	Conditions []*Condition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`                         // 5 conditions
	Actions    []ActionType `protobuf:"varint,4,rep,packed,name=actions,proto3,enum=scott.ActionType" json:"actions,omitempty"` // 4 actions
	Comment    string       `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`                               // optional documentation comment
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{2}
}

func (x *Action) GetVerbIndex() int32 {
	if x != nil {
		return x.VerbIndex
	}
	return 0
}

func (x *Action) GetNounIndex() int32 {
	if x != nil {
		return x.NounIndex
	}
	return 0
}

func (x *Action) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Action) GetActions() []ActionType {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Action) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word    string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`        // the text of the word (truncated)
	Synonym bool   `protobuf:"varint,2,opt,name=synonym,proto3" json:"synonym,omitempty"` // if set, this is a synonym of the previous word
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{3}
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Word) GetSynonym() bool {
	if x != nil {
		return x.Synonym
	}
	return false
}

type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"` // description of the room
	Literal     bool   `protobuf:"varint,2,opt,name=literal,proto3" json:"literal,omitempty"`        // if set, the description is to be printed literally (no "I'm in a" prefix)
	North       int32  `protobuf:"varint,3,opt,name=north,proto3" json:"north,omitempty"`            // index of room to the north
	South       int32  `protobuf:"varint,4,opt,name=south,proto3" json:"south,omitempty"`            // index of room to the south
	East        int32  `protobuf:"varint,5,opt,name=east,proto3" json:"east,omitempty"`              // index of room to the east
	West        int32  `protobuf:"varint,6,opt,name=west,proto3" json:"west,omitempty"`              // index of room to the west
	Up          int32  `protobuf:"varint,7,opt,name=up,proto3" json:"up,omitempty"`                  // index of room above
	Down        int32  `protobuf:"varint,8,opt,name=down,proto3" json:"down,omitempty"`              // index of room below
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{4}
}

func (x *Room) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Room) GetLiteral() bool {
	if x != nil {
		return x.Literal
	}
	return false
}

func (x *Room) GetNorth() int32 {
	if x != nil {
		return x.North
	}
	return 0
}

func (x *Room) GetSouth() int32 {
	if x != nil {
		return x.South
	}
	return 0
}

func (x *Room) GetEast() int32 {
	if x != nil {
		return x.East
	}
	return 0
}

func (x *Room) GetWest() int32 {
	if x != nil {
		return x.West
	}
	return 0
}

func (x *Room) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *Room) GetDown() int32 {
	if x != nil {
		return x.Down
	}
	return 0
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                  // description of the item
	Location    int32  `protobuf:"varint,2,opt,name=location,proto3" json:"location,omitempty"`                       // room number (-1 is inventory)
	IsTreasure  bool   `protobuf:"varint,3,opt,name=is_treasure,json=isTreasure,proto3" json:"is_treasure,omitempty"` // treasure (indicated by asterisks in description)
	Autograb    string `protobuf:"bytes,4,opt,name=autograb,proto3" json:"autograb,omitempty"`                        // if set, automatic get/drop works with this name
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{5}
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *Item) GetIsTreasure() bool {
	if x != nil {
		return x.IsTreasure
	}
	return false
}

func (x *Item) GetAutograb() string {
	if x != nil {
		return x.Autograb
	}
	return ""
}

type Footer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`     // version number
	Adventure int32 `protobuf:"varint,2,opt,name=adventure,proto3" json:"adventure,omitempty"` // adventure number
	Magic     int32 `protobuf:"varint,3,opt,name=magic,proto3" json:"magic,omitempty"`         // magic number (purpose unknown)
}

func (x *Footer) Reset() {
	*x = Footer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Footer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Footer) ProtoMessage() {}

func (x *Footer) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Footer.ProtoReflect.Descriptor instead.
func (*Footer) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{6}
}

func (x *Footer) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Footer) GetAdventure() int32 {
	if x != nil {
		return x.Adventure
	}
	return 0
}

func (x *Footer) GetMagic() int32 {
	if x != nil {
		return x.Magic
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location int32   `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`        // current location of the player
	Flags    []bool  `protobuf:"varint,2,rep,packed,name=flags,proto3" json:"flags,omitempty"`       // the current flag values
	Counters []int32 `protobuf:"varint,3,rep,packed,name=counters,proto3" json:"counters,omitempty"` // the current counter values
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{7}
}

func (x *State) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *State) GetFlags() []bool {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *State) GetCounters() []int32 {
	if x != nil {
		return x.Counters
	}
	return nil
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These fields are from the game file itself.
	Header   *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Actions  []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	Verbs    []*Word   `protobuf:"bytes,3,rep,name=verbs,proto3" json:"verbs,omitempty"`
	Nouns    []*Word   `protobuf:"bytes,4,rep,name=nouns,proto3" json:"nouns,omitempty"`
	Rooms    []*Room   `protobuf:"bytes,5,rep,name=rooms,proto3" json:"rooms,omitempty"`
	Messages []string  `protobuf:"bytes,6,rep,name=messages,proto3" json:"messages,omitempty"`
	Items    []*Item   `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty"`
	Footer   *Footer   `protobuf:"bytes,8,opt,name=footer,proto3" json:"footer,omitempty"`
	// These fields are additional state that exists in-game.
	State *State `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scott_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_scott_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_scott_proto_rawDescGZIP(), []int{8}
}

func (x *Game) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Game) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Game) GetVerbs() []*Word {
	if x != nil {
		return x.Verbs
	}
	return nil
}

func (x *Game) GetNouns() []*Word {
	if x != nil {
		return x.Nouns
	}
	return nil
}

func (x *Game) GetRooms() []*Room {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *Game) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Game) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Game) GetFooter() *Footer {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *Game) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

var File_scott_proto protoreflect.FileDescriptor

var file_scott_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x63, 0x6f, 0x74, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x22, 0x4b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x75,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x6f, 0x75, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x63, 0x6f, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x63,
	0x6f, 0x74, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x34, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0xba, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x62, 0x22, 0x56, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x65,
	0x72, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x05, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2a, 0x88, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x52,
	0x52, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x10, 0x13, 0x2a, 0xe5,
	0x11, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x33, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x34, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x35, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x36, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x38, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x10, 0x0a,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x30, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x31, 0x10, 0x0c,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x32, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x33, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x34, 0x10, 0x0f,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x35, 0x10, 0x10,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x36, 0x10, 0x11,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x37, 0x10, 0x12,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x38, 0x10, 0x13,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x39, 0x10, 0x14,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x30, 0x10, 0x15,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x31, 0x10, 0x16,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x32, 0x10, 0x17,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x33, 0x10, 0x18,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x34, 0x10, 0x19,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x35, 0x10, 0x1a,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x36, 0x10, 0x1b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x37, 0x10, 0x1c,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x38, 0x10, 0x1d,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x39, 0x10, 0x1e,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x30, 0x10, 0x1f,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x31, 0x10, 0x20,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x32, 0x10, 0x21,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x33, 0x10, 0x22,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x34, 0x10, 0x23,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x35, 0x10, 0x24,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x36, 0x10, 0x25,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x37, 0x10, 0x26,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x38, 0x10, 0x27,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x33, 0x39, 0x10, 0x28,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x30, 0x10, 0x29,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x31, 0x10, 0x2a,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x32, 0x10, 0x2b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x33, 0x10, 0x2c,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x34, 0x10, 0x2d,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x35, 0x10, 0x2e,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x36, 0x10, 0x2f,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x37, 0x10, 0x30,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x38, 0x10, 0x31,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x34, 0x39, 0x10, 0x32,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x30, 0x10, 0x33,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x34, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x35, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x36, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x37, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x38, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x54,
	0x10, 0x3a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x32, 0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x42, 0x49,
	0x54, 0x10, 0x3c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x3d, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x3e, 0x12, 0x0d, 0x0a, 0x09,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x40, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x42, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x54, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x30, 0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x30, 0x10, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x57, 0x41, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x48, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x49, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x4a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x4b, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x32, 0x10, 0x4c, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x4d, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x4e, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x4f, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x50, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x51, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x52, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x53, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x54, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x4e, 0x4f, 0x55, 0x4e, 0x5f, 0x43, 0x52, 0x10, 0x55,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x43, 0x52, 0x10, 0x56, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x10, 0x57, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x58, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x59, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x31, 0x10, 0x66, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x32, 0x10, 0x67, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x33, 0x10, 0x68, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x34, 0x10, 0x69, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x35, 0x10, 0x6a, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x36, 0x10, 0x6b, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x37, 0x10, 0x6c, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x38, 0x10, 0x6d, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x35, 0x39, 0x10, 0x6e, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x30, 0x10, 0x6f, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x31, 0x10, 0x70, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x32, 0x10, 0x71, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x33, 0x10, 0x72, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x34, 0x10, 0x73, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x35, 0x10, 0x74, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x36, 0x10, 0x75, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x37, 0x10, 0x76, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x38, 0x10, 0x77, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x36, 0x39, 0x10, 0x78, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x30, 0x10, 0x79, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x31, 0x10, 0x7a, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x32, 0x10, 0x7b, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x33, 0x10, 0x7c, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x34, 0x10, 0x7d, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x35, 0x10, 0x7e, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x36, 0x10, 0x7f, 0x12,
	0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x37, 0x10, 0x80, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x38, 0x10, 0x81,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x37, 0x39, 0x10,
	0x82, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x38, 0x30,
	0x10, 0x83, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x38,
	0x31, 0x10, 0x84, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x38, 0x32, 0x10, 0x85, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x38, 0x33, 0x10, 0x86, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x38, 0x34, 0x10, 0x87, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x38, 0x35, 0x10, 0x88, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x38, 0x36, 0x10, 0x89, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x38, 0x37, 0x10, 0x8a, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x38, 0x38, 0x10, 0x8b, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x38, 0x39, 0x10, 0x8c, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x30, 0x10, 0x8d, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x31, 0x10, 0x8e, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x32, 0x10, 0x8f, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x33, 0x10, 0x90, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x34, 0x10, 0x91,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x35, 0x10,
	0x92, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39, 0x36,
	0x10, 0x93, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x39,
	0x37, 0x10, 0x94, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x39, 0x38, 0x10, 0x95, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x39, 0x39, 0x10, 0x96, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x63, 0x6f, 0x74,
	0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scott_proto_rawDescOnce sync.Once
	file_scott_proto_rawDescData = file_scott_proto_rawDesc
)

func file_scott_proto_rawDescGZIP() []byte {
	file_scott_proto_rawDescOnce.Do(func() {
		file_scott_proto_rawDescData = protoimpl.X.CompressGZIP(file_scott_proto_rawDescData)
	})
	return file_scott_proto_rawDescData
}

var file_scott_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scott_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_scott_proto_goTypes = []interface{}{
	(ConditionType)(0), // 0: scott.ConditionType
	(ActionType)(0),    // 1: scott.ActionType
	(*Header)(nil),     // 2: scott.Header
	(*Condition)(nil),  // 3: scott.Condition
	(*Action)(nil),     // 4: scott.Action
	(*Word)(nil),       // 5: scott.Word
	(*Room)(nil),       // 6: scott.Room
	(*Item)(nil),       // 7: scott.Item
	(*Footer)(nil),     // 8: scott.Footer
	(*State)(nil),      // 9: scott.State
	(*Game)(nil),       // 10: scott.Game
}
var file_scott_proto_depIdxs = []int32{
	0,  // 0: scott.Condition.type:type_name -> scott.ConditionType
	3,  // 1: scott.Action.conditions:type_name -> scott.Condition
	1,  // 2: scott.Action.actions:type_name -> scott.ActionType
	2,  // 3: scott.Game.header:type_name -> scott.Header
	4,  // 4: scott.Game.actions:type_name -> scott.Action
	5,  // 5: scott.Game.verbs:type_name -> scott.Word
	5,  // 6: scott.Game.nouns:type_name -> scott.Word
	6,  // 7: scott.Game.rooms:type_name -> scott.Room
	7,  // 8: scott.Game.items:type_name -> scott.Item
	8,  // 9: scott.Game.footer:type_name -> scott.Footer
	9,  // 10: scott.Game.state:type_name -> scott.State
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_scott_proto_init() }
func file_scott_proto_init() {
	if File_scott_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scott_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Footer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scott_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scott_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scott_proto_goTypes,
		DependencyIndexes: file_scott_proto_depIdxs,
		EnumInfos:         file_scott_proto_enumTypes,
		MessageInfos:      file_scott_proto_msgTypes,
	}.Build()
	File_scott_proto = out.File
	file_scott_proto_rawDesc = nil
	file_scott_proto_goTypes = nil
	file_scott_proto_depIdxs = nil
}
